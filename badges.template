# The latest version of this template can be located at
# https://github.com/galaxy4public/aws-cloudformation-badges
AWSTemplateFormatVersion: 2010-09-09
Description: A nestable template to provide custom badges support to CodeBuild and CodePipeline

Parameters:
  CodeBuildProjects:
    Description: A list of CodeBuild projects to generate badges for (specify '*' to monitor all or leave empty to disable CodeBuild support)
    Type: List<String>
    Default: ''
  CodePipelines:
    Description: A list of CodePipeline names to generate badges for (specify '*' to monitor all or leave empty to disable CodePipeline support)
    Type: List<String>
    Default: ''

Conditions:
  useCodeBuild: !Not [ !Equals [ '', !Join [ '', !Ref  CodeBuildProjects ]]]
  useCodePipeline: !Not [ !Equals [ '', !Join [ '', !Ref  CodePipelines ]]]
  useSelectedCodeBuild: !Not [ !Equals [ '*', !Join [ '', !Ref  CodeBuildProjects ]]]
  useSelectedCodePipeline: !Not [ !Equals [ '*', !Join [ '', !Ref  CodePipelines ]]]

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates the corresponding badges for specified CodeBuild project and CodePipelines
      Environment:
        Variables:
          BUCKET: !Ref Bucket
      Code:
        # I am not particularly proud of the quality and readability of the
        # following code, but the goal was to fit all the required logic
        # into 4K so no external dependencies would be required.  The
        # goal was achieved, but the readability of the code was really
        # sacrificed to get there.
        #                                                   -- (GM)
        ZipFile: |-
          import cfnresponse
          import os,sys,boto3,zlib,base64
          from io import StringIO

          def badge(l,s):
           t='H4sIAJVvy1oCA51UTW+jMBD9K15XuwEpAUO3lwVT+iG1h121UqvuIcrBARO8cjC1TZI2yn/fMSRtWu1pL9gev/dm5o1Fer5ZSrTi2gjVUBwFBJ9nqVktEMQbQ3FtbfsjDNfrdbA+DZRehDEhJAQERmtR2pri/HeOUc3ForYUxwQDv9CitVn6ZXp1ffF4MV0xjSw9BSJJ3F7SUhXdkjc2kKpgFnL38ZrKoGamDkw3N1Z7kd+HnylEWimsN/o28gPNy67gXtU1hWN6eiz8rcO1VBxwdOQnetpOyWxG22k0SzS3nW6QTnbj7c5PROU9T0d2NPO3lg673UEQac9HWwl5pGKlZ3XH/cRw+yiWXHUW8lk/2X0OzGZZGh4aL6Ro75mtkSgpZuCI5oU9+BUR8vXdsOGkNxSf4hAkDtQslaLhTN9oVgpwqpeaY7SJKSYYvcR7KrhtVYtUVUFF/ZU7Twollab4ZD6f7yOqZYWwLxQHkUv0gRX9GxN+LCFLF8iVN2mZ66PT0jthPlTgzqgSUkLCs7MzjKDUXwQRVOf30W2+iskteXWCx8D8Kh+APQYRwMYDtg98xvfZ5v6bdg3P7l04XGRpySuTpYC2XPduFeDWYJb7whW/6/tFmptOQtvQ/l1nMRLw9B9Upwt+IduaQY6NcxfWl2ENHfmGdcYI1lzKTr9JzOHwpnHQM7a85ivRP+wjgUvJm/IoGfja1qJw3PhIaalKTnGj9JLJnhkOPcFmaHFxsLCqKows39gJa4razXspylJyjCrV2EnFlkJCB9f8D3vq0ANrzPiJ65I1bHzDG75iYwOxieFaVHuOEa+QPIqcX07ZOQjzeMx7F6Pv0IvVQKqgPIpNwST3ggjGMtS4n1MBrwJYP/M0dCLHUvF/ScXvUm7U7v+T/QVlT4YuvAQAAA==';bl='build';pl='pipeline';b={bl:{'UNKNOWN':{'W':'95','C':'909090','P1H':'37','P1T':'195','P1L':bl,'P2H':'58','P2T':'645','P2L':'unknown'},'FAILED':{'W':'78','C':'E05D44','P1H':'37','P1T':'195','P1L':bl,'P2H':'41','P2T':'555','P2L':'failed'},'IN_PROGRESS':{'W':'109','C':'007EC6','P1H':'37','P1T':'195','P1L':bl,'P2H':'72','P2T':'720','P2L':'in progress'},'STOPPED':{'W':'90','C':'E05D44','P1H':'37','P1T':'195','P1L':bl,'P2H':'53','P2T':'625','P2L':'stopped'},'SUCCEEDED':{'W':'105','C':'97CA00','P1H':'37','P1T':'195','P1L':bl,'P2H':'68','P2T':'700','P2L':'succeeded'}},pl:{'UNKNOWN':{'W':'112','C':'909090','P1H':'53','P1T':'275','P1L':pl,'P2H':'59','P2T':'805','P2L':'unknown'},'CANCELED':{'W':'112','C':'E05D44','P1H':'53','P1T':'275','P1L':pl,'P2H':'59','P2T':'805','P2L':'cancelled'},'FAILED':{'W':'92','C':'E05D44','P1H':'53','P1T':'275','P1L':pl,'P2H':'39','P2T':'715','P2L':'failed'},'RESUMED':{'W':'112','C':'FE7D37','P1H':'53','P1T':'275','P1L':pl,'P2H':'59','P2T':'805','P2L':'resumed'},'STARTED':{'W':'102','C':'007EC6','P1H':'53','P1T':'275','P1L':pl,'P2H':'49','P2T':'765','P2L':'started'},'SUCCEEDED':{'W':'120','C':'97CA00','P1H':'53','P1T':'275','P1L':pl,'P2H':'67','P2T':'855','P2L':'succeeded'},'SUPERSEDED':{'W':'126','C':'007EC6','P1H':'53','P1T':'275','P1L':pl,'P2H':'73','P2T':'885','P2L':'superseded'}}}
           try:
            d=b[l][s]
           except:
            d=b[l]['UNKNOWN']
           return zlib.decompress(base64.b64decode(t),47).decode('ascii').replace('@W@',d['W']).replace('@C@',d['C']).replace('@P1H@',d['P1H']).replace('@P1T@',d['P1T']).replace('@P1L@',d['P1L']).replace('@P2H@',d['P2H']).replace('@P2T@',d['P2T']).replace('@P2L@',d['P2L'])

          def u(b,l,p,s):
           boto3.client('s3').put_object(Bucket=b,Key='{}/{}.svg'.format(l,p),Body=StringIO(badge(l,s)).getvalue().encode(),ContentType='image/svg+xml',CacheControl='max-age=0,no-cache,no-store,must-revalidate',ACL='public-read')

          def o(b,s,r,l):
           if s in r:
            for p in r[s]:
             if p != '*':
              u(b,l,p,'UNKNOWN')

          def handler(e,c):
           b=os.environ['BUCKET'];t='RequestType'
           if t in e:
            if e[t]=='Create':
             r=e['ResourceProperties'];o(b,'CodePipelines',r,'pipeline');o(b,'CodeBuildProjects',r,'build')
            cfnresponse.send(e,c,cfnresponse.SUCCESS,{},"Custom");return

           r=e['detail']
           if 'pipeline' in r:
            l='pipeline';p=r[l];s=r['state']
           elif 'project-name' in r:
            l='build';p=r['project-name'];s=r['build-status']
           else:
            raise ValueError('Unknown event')

           print('{}/{} => {}'.format(l,p,s))
           try:
            u(b,l,p,s)
           except:
            print('FAILED ({})'.format(sys.exc_info()));return
           print('SUCCESS s3://{}/{}/{}'.format(b,l,p));return
      Handler: index.handler
      Runtime: python3.7
      Timeout: 60
      Role: !GetAtt
       - LambdaExecutionRole
       - Arn

  CodeBuildEvent:
    Condition: useCodeBuild
    Type: AWS::Events::Rule
    Properties:
      Description: Monitors for the CodeBuild state changes
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail: !If
          - useSelectedCodeBuild
          - project-name: !Ref CodeBuildProjects
          - !Ref 'AWS::NoValue'
      Targets:
        -
          Arn: !GetAtt Lambda.Arn
          Id: LambdaForCodeBuild

  CodePipelineEvent:
    Condition: useCodePipeline
    Type: AWS::Events::Rule
    Properties:
      Description: Monitors for the CodePipeline state changes
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail: !If
          - useSelectedCodePipeline
          - pipeline: !Ref CodePipelines
          - !Ref 'AWS::NoValue'
      Targets:
        -
          Arn: !GetAtt Lambda.Arn
          Id: LambdaForCodeBuild

  PermissionForEventsToInvokeLambda1:
    Condition: useCodeBuild
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodeBuildEvent.Arn

  PermissionForEventsToInvokeLambda2:
    Condition: useCodePipeline
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodePipelineEvent.Arn

  Badges:
    DependsOn: LambdaLogGroup
    Type: Custom::Badges
    Properties:
      ServiceToken: !GetAtt Lambda.Arn
      CodeBuildProjects: !Ref CodeBuildProjects
      CodePipelines: !Ref CodePipelines

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties: 
      LogGroupName: !Sub /aws/lambda/${Lambda}
      RetentionInDays: 365

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
            - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
            Effect: Allow
      Path: /
      Policies:
        - PolicyName: BadgesLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*
              - Sid: UpdateBadgesInS3
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt Bucket.Arn
                      - '/*'

Outputs:
  BucketName:
    Description: The name of the S3 bucket where badges are created
    Value: !Ref Bucket

  BucketArn:
    Description: The ARN of the S3 bucket where badges are created
    Value: !GetAtt Bucket.Arn

  BucketUrl:
    Description: The IPv4 domain name of the S3 Bucket where badges are created
    Value: !GetAtt Bucket.DomainName

  BucketDualStackUrl:
    Description: The IPv6 domain name of the S3 Bucket where badges are created
    Value: !GetAtt Bucket.DualStackDomainName

  BucketWebsiteUrl:
    Description: The static website endpoint URL for the S3 Bucket where badges are created
    Value: !GetAtt Bucket.WebsiteURL

